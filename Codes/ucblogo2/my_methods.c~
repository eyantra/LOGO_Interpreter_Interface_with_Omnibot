#include "my_methods.h"
#include "logo.h"
#include "globals.h"

#include <math.h>

#include <termios.h>
//#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/signal.h>
#include <sys/types.h>

pen_info xgr_pen;
int fd;
struct termios oldtio,newtio;       
char* LogoPlatformName = "Firebird";

int back_ground;

int clearing_screen = 0;

double factor = 3.14159/180;
void nop() {
}

void my_init(){
	xgr_pen.orientation=0;
	   int  tty, c, res, i, error;
   long BAUD=B9600;
   
   long         DATABITS = CS8;
   long            STOPBITS = 0;
   long         PARITYON = 0;
   long         PARITY = 0;

  
      //open the device(com port) to be non-blocking (read will return immediately)
      fd = open("/dev/ttyUSB0", O_RDWR);
      if (fd < 0)
      {
         perror("zigbee not found");
         exit(0);
      }

      tcgetattr(fd,&oldtio); // save current port settings 
      // set new port settings for canonical input processing 
      newtio.c_cflag = BAUD | DATABITS | STOPBITS | PARITYON | PARITY ;
      newtio.c_iflag = IGNPAR;
      newtio.c_oflag = 0;
      newtio.c_lflag = 0;   
      newtio.c_cc[VMIN]=1;
      newtio.c_cc[VTIME]=0;
      tcflush(fd, TCIFLUSH);
      tcsetattr(fd,TCSANOW,&newtio);
	
}

void my_finish(){
      tcsetattr(fd,TCSANOW,&oldtio);
      close(fd);

}

void ppd(){

}
void logofill(){


}
void string_draw(unsigned char* s) {
	printf("string %s\n",s);
}

void set_palette(int n, unsigned int r, unsigned int g, unsigned int b) {

}

void get_palette(int n, unsigned int *r, unsigned int *g, unsigned int *b) {
}

void save_pen(pen_info *p) {
    memcpy(((char *)(p)),((char *)(&xgr_pen)),sizeof(pen_info));
}

void restore_pen(pen_info *p) {
    memcpy(((char *)(&xgr_pen)),((char *)(p)),sizeof(pen_info));
    set_pen_width(p->pw);
    set_pen_height(p->ph);
}

unsigned char motor_print(int angle){
	if((angle<30)||(angle>=330)) { printf("forwardC \n"); return 0x06;}  //110
	if((angle<90)&&(angle>=30)) { printf("backwardB \n"); return 0x05;}  //101
	if((angle<150)&&(angle>=90)) { printf("forwardA \n"); return 0x02;}  //010
	if((angle<210)&&(angle>=150)) { printf("backwardC \n"); return 0x07;} //111
	if((angle<270)&&(angle>=210)) { printf("forwardB \n"); return 0x04;}  //100
	if((angle<330)&&(angle>=270)) { printf("backwardA \n"); return 0x03;} //011
	printf("\n\n\n");
}


void line(int x,int y){
	int curx = xgr_pen.xpos;
	int cury = xgr_pen.ypos;
	if(curx!=x || cury!=y) {
		//printf("line %d %d \n",x-curx,cury-y);
		int orienta = deviation(orient(x-curx,cury-y));
		int orientb = orient(x-curx,cury-y);
		if (orienta != xgr_pen.orientation){
			printf("orient\n");
			xgr_pen.orientation = orienta;
			if(orienta<0){
				unsigned char ff = 0x20 | ((unsigned char) abs(orienta) & 0x1f );
				printf(" gg %d\n",ff);
				write(fd,&ff,1); sleep(5);
			}
			else{
				unsigned char ff = 0x00 | ((unsigned char) abs(orienta) & 0x1f );
				printf("gg %d\n",ff);
				write(fd,&ff,1); sleep(5);
			}
		}
		//printf("orientation %d \n" ,orient(x-curx,cury-y));
		//printf("deviation %d \n",deviation(orient(x-curx,cury-y)));
		//printf("distance %d \n",(int)sqrt((x-curx)*(x-curx) + (y-cury)*(y-cury)));
		int d = (int)sqrt((x-curx)*(x-curx) + (y-cury)*(y-cury));
		while(d>32){
			unsigned char ff = (motor_print(orientb)<<5)|0x1f;
			write(fd,&ff,1); sleep(5);
			d=d-32;
		}
		printf("move\n");
		unsigned char ff = (motor_print(orientb)<<5)|((unsigned char) abs(d) & 0x1f );
		printf("gg %d\n",ff);
		write(fd,&ff,1); sleep(5);
		motor_print(orient(x-curx,cury-y));
	}
}


void move(int x,int y){
	int curx = xgr_pen.xpos;
	int cury = xgr_pen.ypos;
	unsigned char spc = 0xc0;
	write(fd,&spc,1); sleep(5);
	if(curx!=x || cury!=y) {
		printf("move %d %d \n",x-curx,cury-y);
		int orienta = deviation(orient(x-curx,cury-y));
		int orientb = orient(x-curx,cury-y);
		if (orienta != xgr_pen.orientation){
			xgr_pen.orientation = orienta;
			if(orienta<0){
				unsigned char ff = 0x20 | ((unsigned char) abs(orienta) & 0x1f );
				write(fd,&ff,1); sleep(5);
			}
			else{
				unsigned char ff = 0x00 | ((unsigned char) abs(orienta) & 0x1f );
				write(fd,&ff,1); sleep(5);
			}
		}
		printf("orientation %d \n" ,orient(x-curx,cury-y));
		printf("deviation %d \n",deviation(orient(x-curx,cury-y)));
		printf("distance %d \n",(int)sqrt((x-curx)*(x-curx) + (y-cury)*(y-cury)));
		int d = (int)sqrt((x-curx)*(x-curx) + (y-cury)*(y-cury));
		while(d>32){
			unsigned char ff = (motor_print(orientb)<<5)|0x1f;
			write(fd,&ff,1); sleep(5);
			d=d-32;
		}
		unsigned char ff = (motor_print(orientb)<<5)|((unsigned char) abs(d) & 0x1f );
		write(fd,&ff,1); sleep(5);
		motor_print(orient(x-curx,cury-y));
	}
}

int orient(int dx, int dy){
	if(dx>=0 && dy>=0) return (int)(atan((double)(dx)/(dy))/factor);
	if(dx>=0 && dy < 0) return 180+(int)(atan((double)(dx)/(dy))/factor);
	if(dx<0 && dy < 0) return 180+(int)(atan((double)(dx)/(dy))/factor);
	if(dx<0 && dy >= 0) return 360+(int)(atan((double)(dx)/(dy))/factor);

}

int deviation(int angle){
	return (angle%60 >= 30)? (angle%60)-60 : (angle%60);
}


